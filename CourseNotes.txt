NOTES ON ANGULAR COURSE
=============================
1.5
Install Angular:
	Make sure to have node installed (and npm)
	To upgrade node version (mac os):
		sudo npm cache clean -f
		sudo npm install -g n
		sudo n stable
Create an Angular project
	ng new name-of-the-project
	cd name-of-the-project
	ng server
1.6
 app>app.component.ts => The TypeScript of the component. Notice the selector section, which is linked with the parent root in the index.html file (app-root)
 app>app.component.html => The template of the component
 index.html => The html file that is actually rendered
1.7
    Installing bootstrap in project:
        npm install --save  bootstrap@3
        Then add the css library in angular.json file (under style section, before the 'src/styles.css' file which is the custom for the project)
2.13
    main.tx First file to be executed in a project. It glues all the modules
    It starts the modules with "bootstrapModule" (previously defined in the import), which connects with the module.ts of your component. This module.ts of your component, connects with the specify ts file of the component itself.
2.15
    creating a component from scratch
2.16
    angular modules (and module files) bundles components
2.18
    Use ng generate component NAME (or ng g c NAME) to generate your own component with the comnmand line (cli)
2.19
    It is required to have always a template for a component, always!
    However, you can use it external (templateURL) or inline (template)
    If using inline, you can use ` (tics) to use multiline. Otherwise, ' for single lines
2.20
    As with templates, for styling the component, you can also use external file (styleUrls , notice this takes an array) or styles (using ` if you need multiple lines). It seems that the css is exclusively for that component, is not inherited in the children
2.21
    Selectors are like css selectors, therefore you can use [] (attributre) or . (class). Id does not work
            selector: 'app-root' ====> <app-root></app-root>
            selector: '[app-root]' ====> <div app-root></app-root>
            selector: '.app-root' ======> <div class='app-root'></div>
2.22
    Data binding can be seen as communication between the code (TS) and the view, and the other way around, from the view towards the code (event binding), or both ways (dual bindings)
        String Interpolation: {{serverName}}
        Property bindings:
                <button [disabled]="allowNewServer">Add</button>
                <p [innerText]="serverName"></p>
                N.B.: You can see the properties you can bind with console.log(element), as well events
        React to events (event binding):
            <button  (click)='onCreateServer()'>Add New Server</button>
            <button  (click)='propertyName="new value"' >Add New Server</button>
            <input  (ihput)='onSomething($event)' > $event contains the data
        Two way data inding (combined property and event binding):
            IN ORDER TO USE TWO_WAY_BINDING (ngModel) you need to import FormsModule!
            <input type="text" class="form-control" [(ngModel)]='myProperty'>
            myProperty will change with a change in input. But also, if somewhere else the myProperty value changes, it will also be reflected in this input control.
2.33
    Directives: Instructions in the DOM
        A component is a directive with template
        But is also possible to have directive without template
            <p appTurnGreen> This will make the paragraph into gree</p>
        Built in directives:
            - Structural directive (*), modifies the structure of the dom by adding/removing the item
                *ngIf:
                Trick to use else (beside use opposite if condition):
                    <p *ngIf='conditioIsTrue;else elseShowBlock'>Show this on IF</p>
                    <ng-template #elseShowBlock>
                        <p>Show this on else</p>
                    </ng-template>
                *ngFor: Repeats the element where is inserted (regardless of whether you use the name in the list or not)
                    <app-server *ngFor="let server of serverList"></app-server>

            - Attribute Directives: Don't modify the DOM by adding or removing elements, but rather modifying the element on which are applied
                ngStyle: Applies styles;
                    <p [ngStyle]="{'background-color': getColor()}"> </p>
                ngClass: Add class
                    <p  [ngStyle]="{'background-color': getColor()}"
                        [ngClass]="{online:isOnline(),offline:!isOnline()}"></p>



