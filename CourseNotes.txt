NOTES ON ANGULAR COURSE
=============================
1.5
Install Angular:
	Make sure to have node installed (and npm)
	To upgrade node version (mac os):
		sudo npm cache clean -f
		sudo npm install -g n
		sudo n stable
Create an Angular project
	ng new name-of-the-project
	cd name-of-the-project
	ng server
1.6
 app>app.component.ts => The TypeScript of the component. Notice the selector section, which is linked with the parent root in the index.html file (app-root)
 app>app.component.html => The template of the component
 index.html => The html file that is actually rendered
1.7
    Installing bootstrap in project:
        npm install --save  bootstrap@3
        Then add the css library in angular.json file (under style section, before the 'src/styles.css' file which is the custom for the project)
2.13
    main.tx First file to be executed in a project. It glues all the modules
    It starts the modules with "bootstrapModule" (previously defined in the import), which connects with the module.ts of your component. This module.ts of your component, connects with the specify ts file of the component itself.
2.15
    creating a component from scratch
2.16
    angular modules (and module files) bundles components
2.18
    Use ng generate component NAME (or ng g c NAME) to generate your own component with the comnmand line (cli)
2.19
    It is required to have always a template for a component, always!
    However, you can use it external (templateURL) or inline (template)
    If using inline, you can use ` (tics) to use multiline. Otherwise, ' for single lines
2.20
    As with templates, for styling the component, you can also use external file (styleUrls , notice this takes an array) or styles (using ` if you need multiple lines). It seems that the css is exclusively for that component, is not inherited in the children
2.21
    Selectors are like css selectors, therefore you can use [attribute ] (attributre) or . (class). Id does not work
            selector: 'app-root' ====> <app-root></app-root>
            selector: '[app-root]' ====> <div app-root></app-root>
            selector: '.app-root' ======> <div class='app-root'></div>
2.22
    Data binding can be seen as communication between the code (TS) and the view, and the other way around, from the view towards the code (event binding), or both ways (dual bindings)
        String Interpolation: {{serverName}}
        Property bindings:
                <button [disabled]="allowNewServer">Add</button>
                <p [innerText]="serverName"></p>
                N.B.: You can see the properties you can bind with console.log(element), as well events
        React to events (event binding):
            <button  (click)='onCreateServer()'>Add New Server</button>
            <button  (click)='propertyName="new value"' >Add New Server</button>
            <input  (ihput)='onSomething($event)' > $event contains the data
        Two way data inding (combined property and event binding):
            IN ORDER TO USE TWO_WAY_BINDING (ngModel) you need to import FormsModule!
            <input type="text" class="form-control" [(ngModel)]='myProperty'>
            myProperty will change with a change in input. But also, if somewhere else the myProperty value changes, it will also be reflected in this input control.
2.33
    Directives: Instructions in the DOM
        A component is a directive with template
        But is also possible to have directive without template
            <p appTurnGreen> This will make the paragraph into gree</p>
        Built in directives:
            - Structural directive (*), modifies the structure of the dom by adding/removing the item
                *ngIf:
                Trick to use else (beside use opposite if condition):
                    <p *ngIf='conditioIsTrue;else elseShowBlock'>Show this on IF</p>
                    <ng-template #elseShowBlock>
                        <p>Show this on else</p>
                    </ng-template>
                *ngFor: Repeats the element where is inserted (regardless of whether you use the name in the list or not)
                    <app-server *ngFor="let server of serverList"></app-server>

            - Attribute Directives: Don't modify the DOM by adding or removing elements, but rather modifying the element on which are applied
                ngStyle: Applies styles;
                    <p [ngStyle]="{'background-color': getColor()}"> </p>
                ngClass: Add class
                    <p  [ngStyle]="{'background-color': getColor()}"
                        [ngClass]="{online:isOnline(),offline:!isOnline()}"></p>
4.57
    To debut in the browser, look for the TypeScript file under the sources/webpack/. folder
    Install augury as a chrome extension to debut
5.61
    Property and Event binding on HTML elements
    Property and Event binding on diretives
    Property and Event binding on custom properties and events
    CUSTOM PROPERTY BINDING
        Use to communicate from PARENT TO CHILDREN
        Use Input decorator (do not forget to import) to expose a property to the outside
        Then, this property can be binded to a variable from other component
            CHILD COMPONENT (ts)
            import { ... Input } from '@angular/core';
            <====== MAKE SURE TO IMPORT

            [...]

            export class ParentComponent implements OnInit {
                @Input('HERE_THE_ALIAS') element: { type: string, name: string, content: string};
                <====== NOTICE THE @Input decorator
            }
            PARENT COMPONENT (HTML)
            <app-server-element
                *ngFor="let serverElement of serverElements"
                [ALIAS]="serverElement"> <======== HERE THE ASSIGNMENT
            </app-server-element>
    CUSTOM EVENT BINDING
        Use to communicate from CHILDREN TO PARENT
        We need to create a new event in the child component, and emmit it with an argument.
        Later, in the father, we catch that event and assign it to a proper method, using the argument emmited.

            CHILD COMPONENT
                TypeScript
                    // Make sure to import EventEmitter and Output
                    import { ... EventEmitter, Output } from '@angular/core';

                    []...
                    export class CockpitComponent implements OnInit {
                        // Create event, assign alias and specify argument that will be passed
                      @Output('HERE_THE_EVENT_ALIAS') newChildEvent = new EventEmitter<{serverName: string, serverContent: string}>();
                      // Use a method to trigger te emmision of the event

                      property_1;
                      property_2;

                      onSomethingHappendInChildComponent() {
                        //Emmit the event and properties
                        this.newChildEvent.emit({serverName: this.property_1, serverContent: this.property_2});
                      }
                    }

                HTML
                    <button (click)="onSomethingHappendInChildComponent()">Emmit New Event</button>

            PARENT COMPONENT
                HTML
                    <child-app (HERE_THE_EVENT_ALIAS)="parent_method($event)"></child-app>

                TypeScript
                    parent_method(serverData: {serverName: string, serverContent: string}) {
                            DO_SOMETHING_HERE
                    })

5.68 Encapsulation
    By default, the css only applies to the component. This is because it uses encapsulation.
    This encapsulation is done by appending to each HTML element of component an specific name, and modifying the CSS to only applies to those new components (shadowing).

    However, this behavior can be changed in the component definition:

    import { [...] ViewEncapsulation } from '@angular/core';

    @Component({
        [...]
        encapsulation: ViewEncapsulation.Emulated // None, Native
    })

    - None will remove the shadowing

5.69 Local Reference
    ONLY TO BE USED IN THE TEMPLATE: Allows to have a 'copy' of the HTML element (any) in the template and pass or use this full HTML element in the template. It can be used as a way to get a value from an input

        <input type="text" class="form-control" #serverNameElement>
        <button class="btn btn-primary" (click)="onAddServer(serverNameInput.value)">Add Server</button>
        // Notice the '#serverNameElement' and the serverNameElement.value
5.70 Access to DOM from TS
    It is possible to access the DOM from the ts file with the @ViewChild decorator.
    By adding a reference name into the HTML file, we can use that reference in the TS file. This will import the HTML element into the TS file, and it is possible to access the properties in the TS.
    DO NOT MODIFIED THE DOM DIRECTLY THROUGH THIS REFERENCE, USE OTHER ANGULAR METHODS.
    HTML file
        <input type="text" class="form-control" #ANY_NAME_HERE>
    TypeScript file
        import { ... ViewChild,ElementRef } from '@angular/core';
        [...]

        export class CockpitComponent implements OnInit {
          @ViewChild('ANY_NAME_HERE') serverHTMLElementContentInput:ElementRef;

          onAddServer(serverName) {
            var serverElementContent = this.serverHTMLElementContentInput.nativeElement.value;
            [...]
          }
        }

    It is possible to access a child component (first one) or all the children elements

    import { ... ViewChildren } from '@angular/core';
    import {CockpitComponent} from './cockpit/cockpit.component'

    export class AppComponent {
      @ViewChildren(CockpitComponent) cockpitElement;

       onServerAdded(serverData: {serverName: string, serverContent: string}) {
         console.log(this.cockpitElement._results[0].serverHTMLElementContentInput.nativeElement.value);
         console.log(this.cockpitElement._results[1].serverHTMLElementContentInput.nativeElement.value);
         console.log(this.cockpitElement._results[2].serverHTMLElementContentInput.nativeElement.value);

      }
    }

5.71 Use <ng-content></ng-content> to indicate a  placeholder in a child component. In this placeholder, angular will inject the text passed inside the HTML tags of hte component. The text inside will be "projected" into the view of the child component.

    <child-component>THIS IS ANY CONTENT</child-component>

    child-component.html
        <p> BLA BLA BLA BLA BLA BLA BLA BLA BLA BLA BLA BLA  </p>
        <ng-content></ng-content>
        <p> BLA BLA BLA BLA BLA BLA BLA BLA BLA BLA BLA BLA  </p>

5.72 Lifecycle
    There is quite a bit of hooks that will be triggered during changes, events, constructions, deletions of the angular application: https://angular.io/guide/lifecycle-hooks:
        - ngOnChanges()
        - ngOnInit()
        - ngDoCheck()
        - ngAfterContentInit()
        - ngAfterContentChecked()
        - ngAfterViewInit()
        - ngAfterViewChecked()
        - ngOnDestroy()

5.73 It is also possible to access the ng-content similto to ViewChild, but with ViewContent
    // PARENT ELEMENT HTML
    <child-element>
       <p #ANY_TAG_NAME></p>
    </child-element>

    //CHILD ELEMENT TS
        @ContentChild('ANY_TAG_NAME') contentHTML;

    anyMethod(){
        console.log(this.contentHTML.nativeElement.textContent);
    }

22.295 DEPLOYMENT
    Just run ' ng build --prod' (it turns on AOT by default for prod (ahead of time))
    So, it will be the same as ng build --prod --aot
    The end product will be compiled into hte dist/SolutionName folder

30.397 ANGULAR 6: WHAT IS NEW
    [DONE, nothing to written]

32.414 TYPESCRIPT
    TYPES: string, number, boolean, Array<TYPE>, any, void and your own custom classes
    CLASSES:
        class car {
            name: string;
            private speed: number;
            constructor(speed: number)
            {
                this.speed = speed || 0;
            }
            accelerate():void{
                this.speed++;
            }
            stati numberOfWheels(): number {
            return 4;
            }
        }

        let car = new Car(5);
        car.accelerate();
        Car.numberOfWheels(); // Calling the static method from the class itself
    INTERFACES
        interface User {
            username: string;
            age?: number; // Optional property, does no need to be implemented
            accelerate(speed:number):void;
        }

        let newUser:User = {
            username: 'huertaj';
            accelerate: function(speed:number){
                /...
            }
        }
    MODULES
        Declaring a class to be used outside the file
        export class ClassName {
            // ...
        }
        If you don't use export (modularity), the class wont be able to be used outside that file

7.83 DIRECTIVES
    Attribute Directives: Sit on element and only affect that element
    Structural Directives: Sit on element but changes the DOM by adding/removing elements on it
    A DIRECTIVE DOES NOT HAVE A TEMPLATE!!
    CUSTOM DIRECTIVE

    import { Directive,ElementRef,OnInit } from '@angular/core';
    @Directive({selector:'[appBasicHighlight]'})
    export class BasicHighlightDirective implements OnInit {
        constructor(private elementRef:ElementRef) {}
        ngOnInit(){this.elementRef.nativeElement.style.backgroundColor = 'green';}
    }
    // DO NOT FORGET TO ADD IN THE APP.MODULE.TS
    ng c directive DIRECTIVE_NAME
    // USE BETTER RENDERER TO MODIFY THE DOM
      ngOnInit()
        {
            this.renderer.addClass(this.elRef.nativeElement,'betterHighlight');
        }

    //USE HOSTBINDING FOR BIND A VARIABLE TO A PROPERTY OF THE HOST ELEMENT
    @HostBinding('style.backgroundColor') myVariable: string = 'yellow';
    Any change in myVariable will be applied directly to the style.backgroundColor of the host element
    This solution is similar to the Renderer2, nothing good, nothing bad

7.91 PASSING PROPERTIES TO DIRECTIVES

  @Input() defaultColor: string = 'purple';
  @Input() highlightColor: string = 'cyan';
<div appBetterHighlight [defaultColor]="'red'" [highlightColor]="'pink'">THIS IS A NEW DIRECTIVE</div>



7.84 CONSTRUCTOR TIP
    constructor(private elementRef:ElementRef) {}
    constructor(public elementRef:ElementRef) {}
        This will create a public/private property called elementRef.

7.89 HOSTLISTENER
    // USE A HOSTLISTENER IN DIRECTIVES TO LISTEN TO EVENTS ON THE ELEMENT AND REACT
      @HostListener('mouseenter') mouseover(eventData: Event){
        this.renderer.addClass(this.elRef.nativeElement,'betterHighlight');
        }
7.91 TRICK: Assigning values to properties
    <div appBetterHighlight [defaultColor]="'red'" highlightColor="pink">THIS IS A NEW DIRECTIVE</div>
    Notice you can assign a value to a property withouth single quotes "pink", as long as the property name has no [] signs
    Notice the difference between the assignment of defaultColor ahd highlightColor

7.93 BUILDIN STRUCTURAL DIRECTIVES
    @Input() set appUnless(condition: boolean) {
    Use a setter (instead of property) to create a property that is executed everytime the value of the property changes.So, that means, we assigne the property to  method and this method is executed when the value of the property (assigned externally) changes

    constructor(private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) { }
    Inject this values to access a template (ng-template) and where to inject or modify the code

    <div *appUnless="false">DISPLAY WHEN FALSE</div>
    <ng-template [appUnless]="false"><div>DISPLAY WHEN FALSE</div></ng-template>

    !!!!!!!!!!!! READ ABOUT TemplateRef vs ViewContainerRef !!!!!!!!
7.94 ngSwitch
       <div *ngFor="let evenNumber of evenNumbers">
       <div [ngSwitch]="evenNumber">
            <p *ngSwitchCase="2">Two</p>
            <p *ngSwitchCase="4">Four</p>
            <p *ngSwitchDefault>Other</p>
       </div>

8.95 USE OF HOSTBINDING TO ADD/REMOVE CLASS
    @HostBinding("class.CLASS_NAME") anyVariableName = false;
    By doing this, when anyVariableName is true, the class name will be added, and if false, it will be removed
9.99 SERVICES AND DEPENDENCY INJECTION
    A services is just a TypeScript class, it does not need any extra decorator, nor add it to the app.modules file
    In order to use a service in a component, you can:
        1) Instantiate the service: DO NOT USE THIS. Not clean
            const logger = new LoggingService();
        2) Use dependency injection:
            2.1) In the Component decorator, add the providers object, and in the array, the name of the class that you can inject
            2.2) Indicate in the constructor of the component that you will need an object of that type
                @Component({
                  [...]
                  providers: [LoggingService]
                })
                constructor(private logger: LoggingService){}

9.100 VERY IMPOTANT: HIERARCHICAL INJECTION
    The injection of dependencies is HIERARCHICAL, very important. This means that the very same instance of the dependency injected into a component, will be (or can be) propagated into the children. So, if the instance is used in the main app.component, the very same instance can be propagated into the child components. This can be handy but also it can lead to errors.

    If you want to inherite the instance of a parent component, then do not add the providers:[NAME_OF_SERVICE] into the @Component. The injector will insert the instance of the parent into the children. Howerver, if you add the service_name into the providers, a new instance of the service will be created and injected into the component.!!!

    The highest level is the apps.module, NOT THE APP.COMPONENT!!!

9.101 INJECTING SERVICE INTO SERVICES
    In order to inject something into a class, YOU NEED ANGULAR METADATA. This means that you need to decorate the class with something, like @Component, @Directive ... For services, since they are not properly Angular objects, there was no need to add a decorator. However, if you want Angular to inject a service into a service, you need to add a decorator, and this is @Injecetable.
    This way, by having a service declared in the APP.MODULE file, any service can be injected into others services (since services do not have parents, they can't inherite from no where)

9.104 USING SERVICES TO COMMUNICATE AMONG SIBLING COMPONENTS
    If two components are sharing the same instance of a service, an event triggered from the service in one component,can be listened (observed) by other component that is subscribed (listening) to the events triggered by the same instance of the service.
    This way, by triggering an event, we can pass information between any sort of components, regardless of the hierarchy, as long as they share the same instance of the service
9.105 It is good practice to initialize variables in the OnInit method!!

10.108 User array.slice() to return a copy of an array, avoiding returning the array itself (reference) that could probably modify the array

11. ROUTES
====================================================================================================
    To add routes to your app:
        import { Routes, RouterModule } from "@angular/router"; <=== Import

        const appRoutes: Routes = [ <========= DECLARE ROUTES (path + component name)
          { path: "", component: HomeComponent },
          { path: "users", component: UsersComponent },
          { path: "servers", component: ServerComponent }
        ];

        @NgModule({
            [...]
            imports: [
                [...]
                RouterModule.forRoot(appRoutes) <======== IMPORT ROUTES
            ]}
            )

    In the app.componen.html, indicate where to load the component set by the the route:
    <router-outlet></router-outlet> <==== This router will be replaced by the component of the route

    In order to call the routes, there are 3 options:

        <a href="/ROUTENAME">  ===> Not a good option, as it reloads the HTML and the page looses the state. It is like  refresh.
        <a routerLink="/servers"> ===> Better option to call, withthe router name. The user does not see the reload
        <a [routerLink]="['/users']"> ==> Using property binding, better option to pass parameters
        (<a [routerLink]="['users']"> or <a [routerLink]="['./users']"> or even <a [routerLink]="['../users']">) vs <a [routerLink]="['/users']"> ===> Without / is a relative path, while with / is absolute!

        User routerLinkActive and routerLinkActiveOptions to dinamycally set a class depending on the route. This can be applied to the same element wih routerLink or to the parent (wrapping) element itself.

            <li role="presentation" routerLinkActive="active" [routerLinkActiveOptions]="{exact: true}"><a routerLink="/">Home</a></li>
            <li role="presentation" routerLinkActive="active"><a routerLink="/servers">Servers</a></li>
            <li role="presentation" routerLinkActive="active"><a [routerLink]="['/users']">Users</a></li>

        Use this.router.navigate(["servers"]); to navigate progrmatically from the ts code itself (import { Router } from "@angular/router";)

        Use the relative route if you want the route to be relative
        import { Router, ActivatedRoute } from "@angular/router";

        this.router.navigate(["servers"], { relativeTo: this.route });

        Use snapshots to access params in the url defined in route path:
            id: this.route.snapshot.params["id"],
            { path: "users/:id/:name", component: UserComponent },
            THIS ONLY WORKS IF LOADING THE COMPONENT FROM OTHER COMPONENT
            IF USING THE ROUTERLINK FROM THE VERY SAME COMPONENT, THIS INIT WONT WORK, ANGULAR WONT LOAD AGAIN THE SAME INFO:
                [routerLink]="['/users',user.id,user.name]"
                IN THIS CASE, USE OBSERVABLE:
                    this.route.params.subscribe((params: Params) => {
                        this.user.id = params["id"];
                        this.user.name = params["name"];
                    });

                SO, SUMMING UP: ONLY USE OBSERVABLE IF YOU THINK THAT THE COMPONENT MAY BE RELOADED FROM WITHIN HIMSELF. IF YOU ARE CERTAIN THE COMPONENT WILL BE ALOWAYS RELOADED FROM OUTSIDE, THEN, THERE IS NO NEED (ALTHOUGH NO HARM THOUG) TO SUBSCRIBE TO THE OBSERVABLE

                WHEN USING OBSERVABLES, YOU MAY WANT TO USE THE UNSUBSCRIBE:
                ngOnDestroy() {
                   console.log("destroy");
                    this.paramsSubscription.unsubscribe();
                }

        USING QUERY PARAMETERS (?mode=SOMETHIN#OTHER_THING)
            -------------------- "INSERTING/PASSING PARAMETERS" -----------------------------------------
                IN HTML
                    <a
                        [routerLink]="['/servers', 5, 'edit']"
                        [queryParams]="{allowEdit: '1', alreadyEdit: '2'}"
                        fragment='loading'
                    </a>

                    http://localhost:4200/servers/5/edit?allowEdit=1&alreadyEdit=2#loading
                PROGRAMATICALLY
                    this.router.navigate(["/server", id, "edit"], {
                        queryParams: { allowEdit: "1" },
                        fragment: "loading"
                    });

            -------------------- "RETRIEVEING PARAMETERS" -----------------------------------------
            With snapshot: (ATTENTION TO RELOAD!!)
                this.route.snapshot.queryParams;
                this.route.snapshot.fragment;
                this.route.snapshot.params["id"];

            USING OBSERVABLES:
                this.route.queryParams.subscribe();
                this.route.fragments.subscribe();
                this.route.params.subscribe((params: Params) => {
                        this.user.id = params["id"];
                        this.user.name = params["name"];
                    });

                        UNSUBSCRIBE (THIS IS OPTIONAL)
                            ngOnDestroy() {
                                console.log("destroy");
                                this.paramsSubscription.unsubscribe();
                            }

        TRICK:
            MAKE SURE TO CONVERT TO INTEGER WHEN GETTING VALUES FROM THE QUERY STRING (USE + to do so)
                +this.route.snapshot.params["id"];

        KEEP PARAMS IN URL
            When moving programatically to a different URL (different route), you can use  queryParamsHandling to either preserve or merge the params in the new URL. By using preserve, we don't loose previous values passed through the URL

            this.router.navigate(["edit"], {
                relativeTo: this.route,
                queryParamsHandling: "preserve"
            });

        WILDCARDS
            To handle URLS that are not handled in the routes:
            The last route should be:
                { path: "not-found", component: PageNotFoundComponent },
                { path: "**", redirectTo: "not-found" }
                AVOID GREEEDY ROUTES!!!
                Notice the use of redirectTo and the wildcards in the path
            It is also possible to use pathMath:'full' to make sure the route matches perfectly:
                { path: '', redirectTo: '/somewhere-else', pathMatch: 'full' }

        OUTSOURCE ROUTE MODULE
            Use an external file to hold your routes and keep the app.modules.ts cleaner

            const appRoutes: Routes = [
                { path: "", component: HomeComponent },
                [...]
            ];

            @NgModule({
                imports: [RouterModule.forRoot(appRoutes)],
                exports: [RouterModule]
            })
            export class AppRoutingModule {}

        ROUTE GUARDS
            It is logic that is excuted before the ROUTES are accessed. So, moving some logic out of the component so it is executed regardless of the route
            It is a way to protect routes
            So, hooking code to a point to be executed defined by us
            Use the canActivate to guard to check beforehand whether you can access a route
            Or canActivateChild to protect only the children
            Mix this canActivate with an auth Service and you can protect your page, and methods per parent or children
        STATIC DATA IN THE ROUTE DEFINITION
            It is possible to pass static data in the route defintion to be consumed in the view
                {   path: "not-found",
                    component: ErrorPageComponent,
                    data: { message: 'Page not found!'} },
        RESOLVER
            Preprocess before the data is rendered
            You declare the resolver like this:
            {
                path: ":id",
                component: ServerComponent,
                resolve: { server: ServerResolver }
            }
            And the data can be retrieved through the this.route.Data (ActivatedRoute):

                And we use the observable!

                this.route.data.subscribe((data: Data) => {
                    this.server = data["server"];
                });

            The resolver is declared like this (implementing the resolve interface):

                export class ServerResolver implements Resolve<Server> {

                    resolve(
                        route: ActivatedRouteSnapshot,
                        state: RouterStateSnapshot
                    ): Observable<Server> | Promise<Server> | Server {
                        // THIS IS RUN EVERY TIME - NO NEED FOR OBSERVABLE
                        const serverId = +route.params["id"];
                        return this.serversService.getServer(serverId);
                    }
                }

            IMPORTANT IMPORTANT:
                The route will be handled first by the server. That's why the server 404 page has to return the index page. And then, let Angular to handle erroneus URLs.

                It this is not possible, there is an old approach: use this in the routing module:

                    imports: [RouterModule.forRoot(appRoutes, { useHash: true })],

                Use the useHash:true which will append a # in the URL that will let the server know to only care about the domain, not the rest of the URL. However, this give us an ugly URL: http://localhost:4200/#/servers (notice the #)


13 OBSERVABLES
====================================================================================================
    SUBSCRIBER/OBSERVER <---> OBSERVABLE
    Think of an observable as a data source that is delivering data packages asynchronously
    Make sure to unsubscribe the observer!
    SUBJECT ------------
        Use subjects instead of event emmiter for cross components communication

        -- Creating the observer and observable into one SUBJECT

            import { Subject } from "rxjs/Rx";

            export class UsersService {
                userActivated = new Subject();
            }

        -- Emmiting the event
            this.userActivated.next(HERE_THE_DATA_TO_+PASS);
            this.userActivated.error(HERE_THE_DATA_TO_+PASS);
            this.userActivated.complete(HERE_THE_DATA_TO_+PASS);

        -- Subscribing
            this.usersService.userActivated.subscribe(
                (id: number) => {
                    this.user1Activated = id === 1;
                    this.user2Activated = id === 2;
                }
            );
    OPERATORS
        Allow to transform the data sent/received. You apply the OPERATOR on the OBSERVABLE.
        Example:
            Observable.interval(1000).map((data: number) => {
                return { number: data, message: "ALL GOOD" };
            });
    NOTICE THE DIFFERENT NOTATION IF NOT USING THE COMPAT LIBRARY!


14 FORMS
====================================================================================================
    As it is a single page application, THERE IS NO SUBMIT! So, you need angular to help you in sending data to the server, but also receive it and validate
    Template-Driven Approach
        Inferred configuration.

    Reactive Approach
        Manual configuration

                TEMPLATE-DRIVEN APPROACH
        =================================================================================
            1) No need specify nothing in form tag (no verb, url, action ...)
            <form></form>
            2) <form (ngSubmit)='METHOD_TO_HANDLE(f)' #f='ngForm'> // f is keyword
            3) Add ngModel and name in all the elements you want to get the value
                <input type="email" id="email" class="form-control" ngModel name="email">
            4) In the ts file, declare your method:
                METHOD_TO_HANDLE(form: NgForm) {
                   console.log(form); // the values are in form.value
                }

        You can use:

            <form (ngSubmit)='onSubmit(thisForm)' #thisForm='ngForm'>
            @ViewChild("thisForm") signupForm: NgForm;

        To be updated on changes:
                1) <button [disabled]='!f.valid' class="btn btn-primary" type="submit">Submit</button>
                OR

                2) ngOnInit() {
                    this.signupForm.valueChanges.subscribe(() => {
                        this.isValid = this.signupForm.valid;
                        console.log(this.isValid);
                    });
                }
        Use ng-invalid classes to color when invalid
            input.ng-invalid,
                select.ng-invalid {
                    border: 2px solid red;
                }
        Use validators in the input controls for max length, minlength ...

        You can control each individual conttrol by ngModel

            <input type="email" id="email" ngModel #email='ngModel'>
            <p *ngIf='!email.valid' >Please enter a valid email</p>

        Default dropdown value:
            <select id="secret" class="form-control" [ngModel]="'pet'" name="secret">
                <option value="pet">Your first Pet?</option>
                <option value="teacher">Your first teacher?</option>
            </select>

        Use ngModelGroup='userData' to group values into its own group of data and also the validation can be divided and set appart for this control

        2 way binding:
            <textarea name='questionAnswer' rows='3' [(ngModel)]='answer'>
            <p>Your reply: {{answer}}</p>
        1 way binding
            <select id="secret" class="form-control" [ngModel]="'pet'" name="secret">

        Use cool local reference:
            <div id="user-data" style="border:1px solid blue" ngModelGroup='userData' #MY_LOCAL_REFERENCE='ngModelGroup'>
            <p class="help-block" *ngIf="!MY_LOCAL_REFERENCE.valid">This Form is not correct</p>

        To set the value of all the form (this requires to set all the values):
            this.signupForm.setValue({
                age: 121,
                gender: "male",
                questionAnswer: "aaabbccc",
                secret: "the secret value",
                userData: {
                    username: "juan",
                    email: "jjjaa@adfafd.com"
                }
            });
            OR

            IF you want to override only part of the form

                this.signupForm.form.patchValue({
            userData: {
                username: "aaaaaaaaa"
            }
        });

        REACTIVE APPROACH
        =================================================================================

            Form Template Driven approach, we need to add FormsModule into the modules
            For Reactive Approach, we need to add the ReactiveFormsModule.

        TIP: ADD TYPE BUTTON TO BUTTON TAGS TO PREVENT SUBMITTING THE FORM!!!!!!!!

SECTION 17: PIPES: https://angular.io/guide/pipes
======================================
    A mechanism to transform data
    VARIABLE | pipe_name
    Pipes:
        uppercase
        date
        date:'fullDate'
        date:'dd-mm-yyy'
    import { PipeTransform, Pipe } from "@angular/core";

    @Pipe({
        name: "shorten"
    })
    export class ShortenPipe implements PipeTransform {
        transform(value: any) {
        return `<strong>${value.substr(0, 2)}</strong>`;
        }
    }

    YOU CAN USE PIPE TO FILTER AUTOMATICALLY IN A LIST (FOR LOOP!!!!!!!!)

    The pipe does not get refreshed when a change is done in the DOM, this is to prevent performance issue.
    It is possible to chane the behaviour and trigger the pipe when the DOM changes by making the PURE property to FALSE.
    THIS MAY HVE PERFORMANCE ISSUES!!!!!!!!!!!!!!
    @Pipe({
    name: "filter",
    pure: false
    })

    Use async PIPE!!!!!!
        When a value is gonna change asynchronously, you can use this pipe to wait for the value:

        <h3>App Status: {{appStatus | async}}</h3>

        appStatus = new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve("stable");
    }, 2000);
  });

LECTURE 17: HTTP REQUESTS
====================================================================================================

    USING FIREBASE FROM GOOGLE: https://udemy-angular-training-0001.firebaseio.com/
    (Real Time database)

LECTURE 20: AUTHENTICATION
====================================================================================================
    Use canAcitate interface to guard the routes
        { path: "shopping-list", component: ShoppingListComponent, canActivate:[AuthGuardService] },

        import {CanActivate, RouterStateSnapshot, ActivatedRouteSnapshot} from '@angular/router'
        import {Injectable} from'@angular/core'
        import {AuthService} from './auth.service'

        @Injectable()
        export class AuthGuardService {
            constructor(private authService:AuthService){}
            canActivate(route:ActivatedRouteSnapshot, state: RouterStateSnapshot){
                return this.authService.auth;
            }
        }
    To protect the views, use an auth service to share the state of the user


LECTURE 26: ANIMATIONS IN ANGULAR
====================================================================================================
    - install the new animations package): npm install --save @angular/animations
    - In the AppModule!, This Module needs to be imported from @angular/platform-browser/animations'
            import { BrowserAnimationsModule } from '@angular/platform-browser/animations'
    - Add the BrowserAnimationsModule  to your imports[]  array in AppModule
    - You then import trigger , state , style  etc from @angular/animations  instead of @angular/core

LECTURE 28: UNIT TESTING IN ANGULAR 2+
====================================================================================================
    - In a traditional app, the session (cookie) is sent client-server to validate the user
    - In a SPA, a token is sent from the server to the client, and the client will use it as a key to validate its request

LECTURE 21: MODULES
====================================================================================================
    app.module.ts
        Declarations: The components
        Imports: The modules (forms, routes, http)
        Providers: Classes available in the whole class
    Custom Modules (potential)
        Group of components that make up a feature
    Watchout when grouping components into modules, services may be reused!!
    Make sure to import the CommonModule
        import { CommonModule } from "@angular/common";
        imports: [CommonModule, ReactiveFormsModule],
    You must not duplicate declarations of modules, services, components ....
    Sharing directives using shared modules
    For Lazy Loading, use AuthGuard canLoad!!! (instead of canActivate)
    DO NOT ADD SERVICES IN A SHARED MODULE, IT HAS REPERCUSSIONS IN THE NUMBER OF INSTANCES!!
    Use a core module to group provides and imports of your app
    Ahead of Time Compilation (AOT Compilation):
        PROS:
            Faster load time
            Check of templates for bug
            Smaller file size
        CONS:
            You have take special care of the code used in the Views
        USE AOT! HUGE DECREASE OF SIZE (80% reduction!)
        ng build --prod --aot
    Use "preloadingStrategy: PreloadAllModules" in conjunction with Lazy loading to have lazy loading modules but at the same time, they will be pre loaded, so somehow, splitting the download of load of parts of the applications in advance



